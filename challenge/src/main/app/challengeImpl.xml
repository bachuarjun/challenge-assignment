<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    
    <flow name="challengeImpl_distributionRequestProcess">
        <set-variable variableName="errors" value="#[new java.util.ArrayList()]" doc:name="errors"/>
        <scatter-gather doc:name="Scatter-Gather">
            <flow-ref name="getCustomerDetails" doc:name="getCustomerDetails"/>
            <flow-ref name="getPolicyDetails" doc:name="getPolicyDetails"/>
        </scatter-gather>
        <scripting:component doc:name="seggregateErrorsAndResponses">
            <scripting:script engine="Groovy"><![CDATA[import dk.topdanmark.error.ErrorInfo;
import dk.topdanmark.pojo.Customer;
import dk.topdanmark.pojo.Policy;

for( java.lang.Object obj : payload){
	if(obj instanceof ErrorInfo){
		flowVars.errors.add(obj)
	}
	if(obj instanceof Customer){
		flowVars.customerDetails = obj;
	}
	
	if(obj instanceof Policy){
		flowVars.policyDetails = obj;
	}
	
	
}
]]></scripting:script>
        </scripting:component>
        <message-filter onUnaccepted="preapreAndSendErrorMessage" doc:name="filterIfErrors">
            <expression-filter expression="#[flowVars['errors'].size() == 0]"/>
        </message-filter>
        <dw:transform-message doc:name="prepare_distribution_reqest" metadata:id="19a49035-2251-40de-a2ce-034f7b867ebc">
            <dw:input-payload/>
            <dw:input-variable mimeType="application/java" variableName="customerDetails"/>
            <dw:input-variable mimeType="application/java" variableName="policyDetails"/>
            <dw:input-variable mimeType="application/java" variableName="customerId"/>
            <dw:input-variable mimeType="application/java" variableName="policyId"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://local.topdanmark.dk/DocDistribution/
---
{
	ns0#distribution_request: {
		customerId: flowVars.customerId as :number,
		name: flowVars.customerDetails.name,
		street_1: flowVars.customerDetails.street_1,
		street_2: flowVars.customerDetails.street_2,
		zipcode: flowVars.customerDetails.zipcode,
		city: flowVars.customerDetails.city,
		country: flowVars.customerDetails.country,
		policynumber: flowVars.policyId as :number,
		policytype: flowVars.policyDetails.type,
		price: flowVars.policyDetails.premium as :string
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <logger message=" sending document distribution webservice  request and the payload is :   #[payload]" level="INFO" doc:name="Logger"/>
        <ws:consumer config-ref="DocumentDistributionService" operation="sendDocument" doc:name="sendDocument"/>
        <dw:transform-message doc:name="distribution_report_to_response" metadata:id="4d656148-f320-4c53-93fe-ab93336872fc">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%namespace ns0 http://local.topdanmark.dk/DocDistribution/
---
{
	status: payload.ns0#distribution_report.status,
	message: payload.ns0#distribution_report.message
}]]></dw:set-payload>
        </dw:transform-message>
        <choice-exception-strategy doc:name="Choice Exception Strategy">
            <catch-exception-strategy when="exception.causedBy(java.net.ConnectException)" doc:name="java.net.ConnectException">
                <logger message="DocumentsitributionService is down" level="INFO" doc:name="Logger"/>
                <scripting:component doc:name="addErrorInfo">
                    <scripting:script engine="Groovy"><![CDATA[flowVars.errors.add(new dk.topdanmark.error.ErrorInfo("ERR500","DocumentDistribution Service is down","DOCUMENT_DISTRIBUTION"))]]></scripting:script>
                </scripting:component>
                <flow-ref name="preapreAndSendErrorMessage" doc:name="preapreAndSendErrorMessage"/>
            </catch-exception-strategy>
            <catch-exception-strategy doc:name="SoapFaultException" when="#[exception.causedBy(org.mule.module.ws.consumer.SoapFaultException)]">
                 <logger message="DocumentsitributionService responded with SOAP Fault" level="INFO" doc:name="Logger"/>
                <scripting:component doc:name="addErrorInfo">
                    <scripting:script engine="Groovy"><![CDATA[flowVars.errors.add(new dk.topdanmark.error.ErrorInfo("ERR400","SOAP Fault occured","DOCUMENT_DISTRIBUTION"))]]></scripting:script>
                </scripting:component>
                <flow-ref name="preapreAndSendErrorMessage" doc:name="preapreAndSendErrorMessage"/>
             </catch-exception-strategy>
            <exception-strategy ref="GeneralExceptionStrategy" doc:name="GeneralExceptionStrategy"/>
        </choice-exception-strategy>
        
    </flow>
    <catch-exception-strategy name="GeneralExceptionStrategy" logException="false">
        <logger message="Unexpected error" level="INFO" doc:name="Logger"/>
        <scripting:component doc:name="addErrorInfo">
            <scripting:script engine="Groovy"><![CDATA[flowVars.errors.add(new dk.topdanmark.error.ErrorInfo("ERR500","Unexpected error","API"))]]></scripting:script>
        </scripting:component>
        <flow-ref name="preapreAndSendErrorMessage" doc:name="preapreAndSendErrorMessage"/>
    </catch-exception-strategy>
    <flow name="preapreAndSendErrorMessage">
        <scripting:component doc:name="prepareerrorMessage">
            <scripting:script engine="Groovy"><![CDATA[import java.util.LinkedHashMap;
import dk.topdanmark.error.ErrorInfo;

LinkedHashMap errorMessage = new LinkedHashMap();
errorMessage.put("errorDescription","one or more dependancies are failed");
errorMessage.put("errors",flowVars.errors);


if(message.getOutboundProperty("http.status") == null){
	if(flowVars.errors.size() == 1){
		ErrorInfo errorInfo= flowVars.errors[0];
		message.setOutboundProperty("http.status",errorInfo.getHttpStatusCode());
	} else {
		message.setOutboundProperty("http.status",424);
	}
}
payload = errorMessage;]]></scripting:script>
        </scripting:component>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
    </flow>
    <flow name="getPolicyDetails">
        <logger message="Sending request to get the policy details " level="INFO" doc:name="Logger"/>
        <http:request config-ref="PolicyAPI_HTTP_Request_Configuration" path="/policy/{policyId}" method="GET" doc:name="requestForPolicyDetails">
            <http:request-builder>
                <http:uri-param paramName="policyId" value="#['123456789']"/>
            </http:request-builder>
        </http:request>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <logger message="Policiy API Responsded with HTTP Status #[message.inboundProperties['http.status']]  and response Body is  :  #[payload]" level="INFO" doc:name="Logger"/>
        <json:validate-schema schemaLocation="policy-details.schema" doc:name="validatePolicyInfoJSONSchema"/>
        <json:json-to-object-transformer returnClass="dk.topdanmark.pojo.Policy" mimeType="application/java" doc:name="JSONToPolicy"/>
        <choice-exception-strategy doc:name="Choice Exception Strategy">
            <catch-exception-strategy when="#[exception.causedBy(java.net.ConnectException)]" doc:name="java.net.ConnectException">
                <logger message=" Policy Service API is down at the moment " level="ERROR" doc:name="Logger"/>
                <set-payload value="#[new dk.topdanmark.error.ErrorInfo(&quot;ERR500&quot;,&quot;Policy Service API is down at the moment &quot;,&quot;POLICY&quot;)]" doc:name="ErrorInfo" mimeType="application/java"/>
            </catch-exception-strategy>
            <catch-exception-strategy when="#[exception.causedBy(org.mule.module.json.validation.JsonSchemaValidationException)]" doc:name="JsonSchemaValidationException">
                <logger message="Error Invalid content was recieved discarding message" level="INFO" doc:name="Logger"/>
                <set-payload value="#[new dk.topdanmark.error.ErrorInfo(&quot;ERR424&quot;,&quot;Error Invalid content was recieved&quot;,&quot;POLICY&quot;)]" doc:name="ErrorInfo" mimeType="application/java"/>
            </catch-exception-strategy>
            <exception-strategy ref="GeneralExceptionStrategy" doc:name="GeneralExceptionStrategy"/>
        </choice-exception-strategy>
    </flow>
    <flow name="getCustomerDetails">
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <request-reply  doc:name="Request-Reply" timeout="1000">
            <jms:outbound-endpoint  queue="${crm.getCustomerDetails.requestQueue}" connector-ref="CustomerService_Active_MQ_Configuration" doc:name="RequestCustomerDetails" >
            </jms:outbound-endpoint>
            <jms:inbound-endpoint  queue="${crm.getCustomerDetails.responseQueue}" connector-ref="CustomerService_Active_MQ_Configuration" doc:name="RecieveCustomerDetails" >
            </jms:inbound-endpoint>
        </request-reply>
        <logger message="Got the reply from customer service queue_resp  and response is #[payload]" level="INFO" doc:name="Logger"/>
        <json:validate-schema schemaLocation="customer-details.schema" doc:name="Validate JSON Schema"/>
        <json:json-to-object-transformer returnClass="dk.topdanmark.pojo.Customer" doc:name="JSONToCustomer"/>
        <choice-exception-strategy doc:name="Choice Exception Strategy">
            
            <catch-exception-strategy when="#[exception.causedBy(org.mule.transport.jms.redelivery.MessageRedeliveredException)]" doc:name="MessageRedeliveredException" logException="false">
                <logger message="Customer details redelivered so skipping" level="INFO" doc:name="Logger"/>
                <set-payload value="#[new dk.topdanmark.error.ErrorInfo(&quot;ERR499&quot;,&quot;Customer data recieved  after the request is ended&quot;,&quot;CRM&quot;)]" mimeType="application/java" doc:name="ErrorInfo"/>
            </catch-exception-strategy>
            <catch-exception-strategy when="#[exception.causedBy(org.mule.api.routing.ResponseTimeoutException)]" doc:name="org.mule.api.routing.ResponseTimeoutException">
                <logger message=" Customer Service not responsed within  time " level="ERROR" doc:name="Logger"/>
                <set-payload value="#[new dk.topdanmark.error.ErrorInfo(&quot;ERR599&quot;,&quot;Customer Service not responsed within  time &quot;,&quot;CRM&quot;)]" doc:name="ErrorInfo" mimeType="application/java"/>
            </catch-exception-strategy>
            <catch-exception-strategy when="#[exception.causedBy(org.mule.module.json.validation.JsonSchemaValidationException)]" doc:name="JsonSchemaValidationException">
                <logger message="Error Invalid content was recieved discarding message" level="INFO" doc:name="Logger"/>
                <set-payload value="#[new dk.topdanmark.error.ErrorInfo(&quot;ERR424&quot;,&quot;Error Invalid content was recieved&quot;,&quot;CRM&quot;)]" doc:name="ErrorInfo" mimeType="application/java"/>
            </catch-exception-strategy>
            <exception-strategy ref="GeneralExceptionStrategy" doc:name="GeneralExceptionStrategy"/>
        </choice-exception-strategy>
    </flow>
</mule>
