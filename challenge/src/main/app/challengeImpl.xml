<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <jms:activemq-connector name="CustomerService_Active_MQ_Configuration" brokerURL="tcp://localhost:61616" validateConnections="true" doc:name="Active MQ"/>
    <http:request-config name="PolicyAPI_HTTP_Request_Configuration" host="localhost" port="8082" basePath="/api" doc:name="HTTP Request Configuration">
        <http:raml-api-configuration location="policy.raml"/>
    </http:request-config>
    <ws:consumer-config name="Web_Service_Consumer" service="DocumentDistribution" port="DocumentDistributionSOAP" serviceAddress="http://localhost:8088/mockDocumentDistributionSOAP" wsdlLocation="document-distribution.wsdl" doc:name="Web Service Consumer"/>
    <flow name="challengeImpl_distributionRequestProcess">
        <set-variable variableName="errors" value="#[new java.util.ArrayList()]" doc:name="errors"/>
        <scatter-gather doc:name="Scatter-Gather">
            <flow-ref name="getCustomerDetails" doc:name="getCustomerDetails"/>
            <flow-ref name="getPolicyDetails" doc:name="getPolicyDetails"/>
        </scatter-gather>
        <scripting:component doc:name="seggregateErrorsAnd">
            <scripting:script engine="Groovy"><![CDATA[import dk.topdanmark.error.ErrorInfo;
import dk.topdanmark.pojo.Customer;
import dk.topdanmark.pojo.Policy;

for( java.lang.Object obj : payload){
	if(obj instanceof ErrorInfo){
		flowVars.errors.add(obj)
	}
	if(obj instanceof Customer){
		flowVars.customerDetails = obj;
	}
	
	if(obj instanceof Policy){
		flowVars.policyDetails = obj;
	}
	
	
}
]]></scripting:script>
        </scripting:component>
        <message-filter onUnaccepted="preapreAndSendErrorMessage" doc:name="filterIfErrors">
            <expression-filter expression="#[flowVars['errors'].size() == 0]"/>
        </message-filter>
        <dw:transform-message doc:name="prepare_distribution_reqest" metadata:id="19a49035-2251-40de-a2ce-034f7b867ebc">
            <dw:input-payload/>
            <dw:input-variable mimeType="application/java" variableName="customerDetails"/>
            <dw:input-variable mimeType="application/java" variableName="policyDetails"/>
            <dw:input-variable mimeType="application/java" variableName="customerId"/>
            <dw:input-variable mimeType="application/java" variableName="policyId"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://local.topdanmark.dk/DocDistribution/
---
{
	ns0#distribution_request: {
		customerId: flowVars.customerId as :number,
		name: flowVars.customerDetails.name,
		street_1: flowVars.customerDetails.street_1,
		street_2: flowVars.customerDetails.street_2,
		zipcode: flowVars.customerDetails.zipcode,
		city: flowVars.customerDetails.city,
		country: flowVars.customerDetails.country,
		policynumber: flowVars.policyId as :number,
		policytype: flowVars.policyDetails.type,
		price: flowVars.policyDetails.premium as :string
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <logger message=" sendingg     payload  #[payload]" level="INFO" doc:name="Logger"/>
        <ws:consumer config-ref="Web_Service_Consumer" operation="sendDocument" doc:name="Web Service Consumer"/>
        <dw:transform-message doc:name="distribution_report_to_response" metadata:id="4d656148-f320-4c53-93fe-ab93336872fc">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%namespace ns0 http://local.topdanmark.dk/DocDistribution/
---
{
	status: payload.ns0#distribution_report.status,
	message: payload.ns0#distribution_report.message
}]]></dw:set-payload>
        </dw:transform-message>
        
    </flow>
    <flow name="preapreAndSendErrorMessage">
        <scripting:component doc:name="prepareerrorMessage">
            <scripting:script engine="Groovy"><![CDATA[import java.util.LinkedHashMap;
LinkedHashMap errorMessage = new LinkedHashMap();
errorMessage.put("errorDescription","one or more dependancies are failed");
errorMessage.put("errors",flowVars.errors);
payload = errorMessage;]]></scripting:script>
        </scripting:component>
        <set-property propertyName="http.status" value="518" doc:name="httpStatus424"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
    </flow>
    <flow name="getPolicyDetails">
        <logger message="@todo Implemet for policy service rest API call" level="INFO" doc:name="Logger"/>
        <http:request config-ref="PolicyAPI_HTTP_Request_Configuration" path="/policy/{policyId}" method="GET" doc:name="requestForPolicyDetails">
            <http:request-builder>
                <http:uri-param paramName="policyId" value="#['123456789']"/>
            </http:request-builder>
        </http:request>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <json:validate-schema schemaLocation="policy-details.schema" doc:name="validatePolicyInfoJSONSchema"/>
        <logger message="Policiy API Response :  #[payload]" level="INFO" doc:name="Logger"/>
        <json:json-to-object-transformer returnClass="dk.topdanmark.pojo.Policy" mimeType="application/java" doc:name="JSONToPolicy"/>
        <choice-exception-strategy doc:name="Choice Exception Strategy">
            <catch-exception-strategy when="#[exception.causedBy(java.net.ConnectException)]" doc:name="java.net.ConnectException">
                <logger message=" Policy Service API is down at the moment " level="ERROR" doc:name="Logger"/>
                <set-payload value="#[new dk.topdanmark.error.ErrorInfo(&quot;ERR500&quot;,&quot;&quot;,&quot;POLICY&quot;)]" doc:name="Set Payload" mimeType="application/java"/>
            </catch-exception-strategy>
            <catch-exception-strategy when="#[exception.causedBy(org.mule.module.json.validation.JsonSchemaValidationException)]" doc:name="Catch Exception Strategy">
                <logger message="Error Invalid content was recieved discarding message" level="INFO" doc:name="Logger"/>
                <set-payload value="#[new dk.topdanmark.error.ErrorInfo(&quot;ERR400&quot;,&quot;&quot;,&quot;POLICY&quot;)]" doc:name="Set Payload" mimeType="application/java"/>
            </catch-exception-strategy>
        </choice-exception-strategy>
    </flow>
    <flow name="getCustomerDetails">
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <request-reply timeout="1000" doc:name="Request-Reply">
            <jms:outbound-endpoint  queue="customer_req" connector-ref="CustomerService_Active_MQ_Configuration" doc:name="RequestCustomerDetails"/>
            <jms:inbound-endpoint  queue="customer_resp" connector-ref="CustomerService_Active_MQ_Configuration" doc:name="RecieveCustomerDetails"/>
        </request-reply>
        <json:validate-schema schemaLocation="customer-details.schema" doc:name="Validate JSON Schema"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <json:json-to-object-transformer returnClass="dk.topdanmark.pojo.Customer" doc:name="JSONToCustomer"/>
        <choice-exception-strategy doc:name="Choice Exception Strategy">
            <catch-exception-strategy when="#[exception.causedBy(org.mule.api.routing.ResponseTimeoutException)]" doc:name="org.mule.api.routing.ResponseTimeoutException">
                <logger message=" Customer Service not responsed within given time " level="ERROR" doc:name="Logger"/>
                <set-payload value="#[new dk.topdanmark.error.ErrorInfo(&quot;ERR500&quot;,&quot;&quot;,&quot;CRM&quot;)]" doc:name="Set Payload" mimeType="application/java"/>
            </catch-exception-strategy>
            <catch-exception-strategy when="#[exception.causedBy(org.mule.module.json.validation.JsonSchemaValidationException)]" doc:name="Catch Exception Strategy">
                <logger message="Error Invalid content was recieved discarding message" level="INFO" doc:name="Logger"/>
                <set-payload value="#[new dk.topdanmark.error.ErrorInfo(&quot;ERR400&quot;,&quot;&quot;,&quot;CRM&quot;)]" doc:name="Set Payload" mimeType="application/java"/>
            </catch-exception-strategy>
        </choice-exception-strategy>
    </flow>
</mule>
